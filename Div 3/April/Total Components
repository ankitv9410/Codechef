You are given all N−1 integers in the range [2,N]. In each step, you choose 2 distinct integers and if they share a common factor greater than 1, you combine them into the same group. You keep doing it until no further merging is possible.

Belonging to a group is an equivalence relation. So if integers a and b are in the same group and integers b and c are in the same group, then integers a and c are also 
said to be in the same group.
Find the total number of groups formed in the end.

Input
First line will contain T, number of test cases. Then the test cases follow.
Each test case contains a single line of input, a single integer N.
Output
For each test case, output in a single line the answer to the problem.

Constraints
1≤T≤2⋅105
2≤N≤107

Subtasks
Subtask #1 (30 points):
1≤T≤200
2≤N≤1000
Subtask #2 (70 points): original constraints

Sample Input
3
2
4
8
Sample Output
1
2
3
Explanation
Test Case 1: The final group is {2}.
Test Case 2: The final groups are {2,4}, and {3}.
Test Case 3: The final groups are {2,3,4,6,8}, {5}, and {7}.

class Solution {
	static boolean[] isPrime;
	static int[] countPrime;
	static int n;

	public static void sieveOfEratoSthenes() {

		isPrime[0] = true;
		isPrime[1] = true;
		for (int i = 2; i * i <= n; i++) {
			for (int j = 2 * i; j <= n; j += i) {
				isPrime[j] = true;
			}
		}
	}

	public static void main(String args[]) throws IOException {
		try {
			n = (int) (1e7 + 5);
			isPrime = new boolean[n + 1];
			sieveOfEratoSthenes();
			countPrime = new int[n + 1];
			int count = 0;

			for (int i = 2; i <= n; i++) {
				if (!isPrime[i]) {
					count++;
				}
				countPrime[i] += count;
			}
			Scanner sc = new Scanner();
			int t = sc.nextInt();
			while (t-- > 0) {
				int n = sc.nextInt();
				if (n == 2)
					System.out.println("1");
				else if (n == 3)
					System.out.println("2");
				else
					System.out.println(countPrime[n] - countPrime[n / 2]+1);
			}
		} catch (Exception e) {
			return;
		}
	}
